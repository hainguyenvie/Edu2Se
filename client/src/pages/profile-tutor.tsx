import { useRoute } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  MapPin, 
  Calendar, 
  Star, 
  Clock, 
  BookOpen, 
  Heart,
  MessageCircle,
  Share2,
  Users,
  TrendingUp,
  Target,
  Award,
  ExternalLink,
  GraduationCap,
  CheckCircle,
  Calculator,
  Book,
  Languages,
  Zap,
  Beaker,
  Leaf,
  Globe
} from "lucide-react";
import { Link } from "wouter";

interface BlogPost {
  id: string;
  title: string;
  content: string;
  date: string;
  likes: number;
  comments: number;
  tags: string[];
}

interface Certification {
  id: string;
  title: string;
  issuer: string;
  date: string;
  icon: string;
}

// Simple subject icon mapping (same as ranking page)
const getSubjectIcon = (subjectName: string) => {
  const subjectMap: { [key: string]: any } = {
    'To√°n': Calculator,
    'VƒÉn': Book,
    'Anh': Languages,
    'L√Ω': Zap,
    'H√≥a': Beaker,
    'Sinh': Leaf,
    'S·ª≠': Globe,
    'ƒê·ªãa': Globe,
    'Tin h·ªçc': Calculator,
    'default': BookOpen
  };
  
  return subjectMap[subjectName] || subjectMap['default'];
};

export default function TutorProfilePage() {
  const [match, params] = useRoute("/profile/tutor/:slug");
  const slug = params?.slug;

  // Mock tutor data - in real app, fetch based on slug
  const tutor = {
    id: "1",
    name: "Th·∫ßy Vi·ªát Ho√†ng",
    avatar: "https://images.unsplash.com/photo-1556157382-97eda2d62296?w=200&h=200&fit=crop",
    coverImage: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=1200&h=400&fit=crop",
    bio: "Ti·∫øn sƒ© Khoa h·ªçc m√°y t√≠nh, chuy√™n gia gi·∫£ng d·∫°y To√°n - L√Ω - H√≥a v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám. ƒê√£ h∆∞·ªõng d·∫´n h∆°n 500 h·ªçc sinh ƒë·ªó ƒë·∫°i h·ªçc.",
    education: "Ti·∫øn sƒ© - ƒêH B√°ch Khoa H√† N·ªôi",
    subjects: ["To√°n", "L√Ω", "H√≥a"],
    experience: "10+ nƒÉm",
    location: "H√† N·ªôi",
    joinDate: "2020-03-15",
    rating: 5.0,
    totalReviews: 156,
    teachingHours: 890,
    completedSessions: 156,
    rank: 1,
    followers: 324,
    following: 45,
    pricePerHour: 600000,
    isVerified: true,
    socialLinks: {
      facebook: "https://facebook.com/thayviethoa ng",
      youtube: "https://youtube.com/@viethoang_teach",
      linkedin: "https://linkedin.com/in/viethoang",
      website: "https://viethoang-teach.com"
    }
  };

  const certifications: Certification[] = [
    {
      id: "1",
      title: "Ti·∫øn sƒ© Khoa h·ªçc m√°y t√≠nh",
      issuer: "ƒêH B√°ch Khoa H√† N·ªôi",
      date: "2015-06-15",
      icon: "üéì"
    },
    {
      id: "2",
      title: "Ch·ª©ng ch·ªâ gi·∫£ng vi√™n xu·∫•t s·∫Øc",
      issuer: "B·ªô Gi√°o d·ª•c & ƒê√†o t·∫°o",
      date: "2020-12-01",
      icon: "üèÜ"
    },
    {
      id: "3",
      title: "Gi·∫£i th∆∞·ªüng Gia s∆∞ c·ªßa nƒÉm",
      issuer: "AitheduConnect",
      date: "2023-12-31",
      icon: "‚≠ê"
    },
    {
      id: "4",
      title: "Ch·ª©ng ch·ªâ Teaching Excellence",
      issuer: "International Teaching Institute",
      date: "2022-08-20",
      icon: "üìú"
    }
  ];

  const blogPosts: BlogPost[] = [
    {
      id: "1",
      title: "Ph∆∞∆°ng ph√°p h·ªçc To√°n hi·ªáu qu·∫£ cho h·ªçc sinh THPT",
      content: "Sau 10 nƒÉm gi·∫£ng d·∫°y, t√¥i nh·∫≠n ra r·∫±ng h·ªçc To√°n kh√¥ng ch·ªâ l√† thu·ªôc c√¥ng th·ª©c m√† c√≤n l√† hi·ªÉu b·∫£n ch·∫•t. H√¥m nay t√¥i s·∫Ω chia s·∫ª 5 ph∆∞∆°ng ph√°p h·ªçc To√°n hi·ªáu qu·∫£ nh·∫•t...",
      date: "2024-01-22",
      likes: 89,
      comments: 34,
      tags: ["To√°n h·ªçc", "Ph∆∞∆°ng ph√°p", "THPT"]
    },
    {
      id: "2",
      title: "T·∫°i sao h·ªçc sinh s·ª£ V·∫≠t l√Ω v√† c√°ch kh·∫Øc ph·ª•c",
      content: "V·∫≠t l√Ω th∆∞·ªùng ƒë∆∞·ª£c coi l√† m√¥n kh√≥ nh·∫•t. Nh∆∞ng th·ª±c ch·∫•t, V·∫≠t l√Ω r·∫•t g·∫ßn g≈©i v·ªõi cu·ªôc s·ªëng. T√¥i s·∫Ω chia s·∫ª c√°ch l√†m cho V·∫≠t l√Ω tr·ªü n√™n th√∫ v·ªã v√† d·ªÖ hi·ªÉu...",
      date: "2024-01-18",
      likes: 67,
      comments: 28,
      tags: ["V·∫≠t l√Ω", "T√¢m l√Ω h·ªçc", "Gi·∫£ng d·∫°y"]
    },
    {
      id: "3",
      title: "Kinh nghi·ªám luy·ªán thi ƒë·∫°i h·ªçc t·ª´ A ƒë·∫øn Z",
      content: "V·ªõi 10 nƒÉm kinh nghi·ªám luy·ªán thi, t√¥i ƒë√£ gi√∫p h√†ng trƒÉm h·ªçc sinh ƒë·ªó ƒë·∫°i h·ªçc. B√†i vi·∫øt n√†y s·∫Ω t·ªïng h·ª£p to√†n b·ªô kinh nghi·ªám t·ª´ vi·ªác l√™n k·∫ø ho·∫°ch ƒë·∫øn tips l√†m b√†i...",
      date: "2024-01-15",
      likes: 124,
      comments: 56,
      tags: ["Thi ƒë·∫°i h·ªçc", "Chi·∫øn l∆∞·ª£c", "Kinh nghi·ªám"]
    }
  ];

  const teachingStats = [
    { label: "ƒê√°nh gi√°", value: "5.0‚òÖ", icon: Star, color: "text-yellow-600" },
    { label: "Gi·ªù d·∫°y", value: "890h", icon: Clock, color: "text-blue-600" },
    { label: "H·ªçc sinh", value: "156", icon: Users, color: "text-green-600" },
    { label: "T·ª∑ l·ªá ƒë·ªó ƒêH", value: "95%", icon: Target, color: "text-purple-600" }
  ];

  if (!match) {
    return <div>Profile not found</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Cover Image */}
      <div className="relative h-64 bg-gradient-to-r from-purple-600 to-blue-600">
        <img 
          src={tutor.coverImage} 
          alt="Cover" 
          className="w-full h-full object-cover opacity-80"
        />
        <div className="absolute inset-0 bg-gradient-to-r from-purple-600/70 to-blue-600/70" />
        
        {/* Back Button */}
        <div className="absolute top-6 left-6">
          <Link href="/ranking">
            <Button variant="secondary" className="bg-white/90 hover:bg-white">
              ‚Üê Quay l·∫°i b·∫£ng x·∫øp h·∫°ng
            </Button>
          </Link>
        </div>

        {/* Share Button */}
        <div className="absolute top-6 right-6">
          <Button variant="secondary" className="bg-white/90 hover:bg-white">
            <Share2 className="w-4 h-4 mr-2" />
            Chia s·∫ª
          </Button>
        </div>
      </div>

      <div className="container mx-auto px-4 -mt-20 relative z-10">
        {/* Profile Header */}
        <Card className="mb-8 shadow-xl">
          <CardContent className="p-8">
            <div className="flex flex-col md:flex-row items-start gap-6">
              {/* Avatar & Basic Info */}
              <div className="flex flex-col items-center md:items-start">
                <div className="relative">
                  <Avatar className="w-32 h-32 border-4 border-white shadow-lg mb-4">
                    <AvatarImage src={tutor.avatar} alt={tutor.name} />
                    <AvatarFallback className="text-2xl">{tutor.name[0]}</AvatarFallback>
                  </Avatar>
                  {tutor.isVerified && (
                    <div className="absolute -bottom-2 -right-2 bg-blue-600 text-white rounded-full p-2">
                      <CheckCircle className="w-6 h-6 fill-current" />
                    </div>
                  )}
                </div>
                
                <div className="text-center md:text-left">
                  <div className="flex items-center gap-2 mb-2">
                    <h1 className="text-3xl font-bold text-gray-900">{tutor.name}</h1>
                    {tutor.isVerified && (
                      <Badge className="bg-blue-600 text-white flex items-center gap-2 px-3 py-1 rounded-full">
                        <div className="w-4 h-4 rounded-full border-2 border-white flex items-center justify-center">
                          <CheckCircle className="w-2.5 h-2.5 fill-current text-white" />
                        </div>
                        VERIFIED
                      </Badge>
                    )}
                  </div>
                  <Badge className="bg-gradient-to-r from-purple-600 to-blue-600 text-white mb-2">
                    #{tutor.rank} - Gia s∆∞ h√†ng ƒë·∫ßu
                  </Badge>
                  <div className="flex items-center gap-2 text-gray-600 mb-2">
                    <GraduationCap className="w-4 h-4" />
                    <span>{tutor.education}</span>
                  </div>
                  <div className="flex items-center gap-2 text-gray-600 mb-2">
                    <MapPin className="w-4 h-4" />
                    <span>{tutor.location}</span>
                  </div>
                  <div className="flex items-center gap-2 text-gray-600">
                    <Calendar className="w-4 h-4" />
                    <span>Tham gia t·ª´ {new Date(tutor.joinDate).toLocaleDateString('vi-VN')}</span>
                  </div>
                </div>
              </div>

              {/* Stats & Info */}
              <div className="flex-1">
                <p className="text-gray-700 text-lg leading-relaxed mb-6">{tutor.bio}</p>
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                  {teachingStats.map((stat, index) => (
                    <div key={index} className="text-center p-4 bg-gray-50 rounded-lg">
                      <stat.icon className={`w-6 h-6 ${stat.color} mx-auto mb-2`} />
                      <div className="text-2xl font-bold text-gray-900">{stat.value}</div>
                      <div className="text-sm text-gray-600">{stat.label}</div>
                    </div>
                  ))}
                </div>

                <div className="flex flex-wrap gap-3 mb-4">
                  {tutor.subjects.map((subject, index) => {
                    const Icon = getSubjectIcon(subject);
                    return (
                      <Badge key={index} className="bg-gradient-to-r from-green-100 to-blue-100 text-green-700 border-green-200">
                        <Icon className="w-4 h-4 mr-1" /> {subject}
                      </Badge>
                    );
                  })}
                </div>

                <div className="flex items-center gap-6 text-sm text-gray-600">
                  <div className="flex items-center gap-1">
                    <Users className="w-4 h-4" />
                    <span className="font-semibold">{tutor.followers}</span>
                    <span>ng∆∞·ªùi theo d√µi</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <span className="font-semibold">{tutor.following}</span>
                    <span>ƒëang theo d√µi</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <span className="font-semibold text-green-600">{tutor.pricePerHour.toLocaleString()}‚Ç´/h</span>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col gap-3">
                <Button className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white">
                  üìö ƒê·∫∑t l·ªãch h·ªçc
                </Button>
                <Button variant="outline">
                  <Heart className="w-4 h-4 mr-2" />
                  Theo d√µi
                </Button>
                <Button variant="outline">
                  <MessageCircle className="w-4 h-4 mr-2" />
                  Nh·∫Øn tin
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Content Tabs */}
        <Tabs defaultValue="blog" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-white border border-gray-200 rounded-lg p-1">
            <TabsTrigger value="blog" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
              ‚úçÔ∏è Blog & Chia s·∫ª
            </TabsTrigger>
            <TabsTrigger value="curriculum" className="data-[state=active]:bg-orange-600 data-[state=active]:text-white">
              üìö Ch∆∞∆°ng tr√¨nh h·ªçc
            </TabsTrigger>
            <TabsTrigger value="certifications" className="data-[state=active]:bg-blue-600 data-[state=active]:text-white">
              üéì B·∫±ng c·∫•p
            </TabsTrigger>
            <TabsTrigger value="social" className="data-[state=active]:bg-green-600 data-[state=active]:text-white">
              üåê Li√™n k·∫øt
            </TabsTrigger>
          </TabsList>

          {/* Blog Posts */}
          <TabsContent value="blog" className="space-y-6">
            {blogPosts.map((post) => (
              <Card key={post.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <CardTitle className="text-xl text-gray-900">{post.title}</CardTitle>
                  <div className="flex items-center gap-4 text-sm text-gray-500">
                    <span>{new Date(post.date).toLocaleDateString('vi-VN')}</span>
                    <div className="flex items-center gap-1">
                      <Heart className="w-4 h-4" />
                      <span>{post.likes}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <MessageCircle className="w-4 h-4" />
                      <span>{post.comments}</span>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 mb-4 line-clamp-3">{post.content}</p>
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                  <Button variant="outline" size="sm">
                    ƒê·ªçc th√™m ‚Üí
                  </Button>
                </CardContent>
              </Card>
            ))}
          </TabsContent>

          {/* Curriculum */}
          <TabsContent value="curriculum" className="space-y-6">
            <div className="grid gap-6">
              {/* Mock curriculum data */}
              {[
                {
                  id: "1",
                  title: "To√°n C·∫•p T·ªëc - √în Thi ƒê·∫°i H·ªçc",
                  subject: "To√°n",
                  grade: "L·ªõp 12",
                  difficulty: "advanced",
                  estimatedHours: 40,
                  price: 800000,
                  description: "Kh√≥a h·ªçc t·ªïng h·ª£p to√†n b·ªô ki·∫øn th·ª©c To√°n 12 cho k·ª≥ thi ƒê·∫°i h·ªçc",
                  topics: [
                    "H√†m s·ªë v√† ƒë·ªì th·ªã",
                    "ƒê·∫°o h√†m v√† ·ª©ng d·ª•ng",
                    "T√≠ch ph√¢n v√† ·ª©ng d·ª•ng",
                    "S·ªë ph·ª©c",
                    "H√¨nh h·ªçc kh√¥ng gian",
                    "Ph∆∞∆°ng tr√¨nh v√† b·∫•t ph∆∞∆°ng tr√¨nh"
                  ]
                },
                {
                  id: "2",
                  title: "To√°n N√¢ng Cao - L·ªõp 11",
                  subject: "To√°n",
                  grade: "L·ªõp 11",
                  difficulty: "intermediate",
                  estimatedHours: 35,
                  price: 700000,
                  description: "Ch∆∞∆°ng tr√¨nh To√°n 11 n√¢ng cao v·ªõi c√°c d·∫°ng b√†i kh√≥",
                  topics: [
                    "L∆∞·ª£ng gi√°c c∆° b·∫£n",
                    "Ph∆∞∆°ng tr√¨nh l∆∞·ª£ng gi√°c",
                    "D√£y s·ªë v√† c·∫•p s·ªë",
                    "Gi·ªõi h·∫°n h√†m s·ªë",
                    "ƒê∆∞·ªùng th·∫≥ng v√† m·∫∑t ph·∫≥ng",
                    "Kh·ªëi ƒëa di·ªán"
                  ]
                }
              ].map((curriculum) => (
                <Card key={curriculum.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-xl mb-2">{curriculum.title}</CardTitle>
                        <div className="flex items-center gap-3 mb-2">
                          <Badge className="bg-blue-100 text-blue-800">
                            {curriculum.subject} - {curriculum.grade}
                          </Badge>
                          <Badge className={
                            curriculum.difficulty === 'advanced' ? 'bg-red-100 text-red-800' :
                            curriculum.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }>
                            {curriculum.difficulty === 'advanced' ? 'N√¢ng cao' :
                             curriculum.difficulty === 'intermediate' ? 'Trung b√¨nh' : 'C∆° b·∫£n'}
                          </Badge>
                        </div>
                        <p className="text-gray-600 text-sm">{curriculum.description}</p>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold text-green-600">
                          {new Intl.NumberFormat('vi-VN', {
                            style: 'currency',
                            currency: 'VND'
                          }).format(curriculum.price)}
                        </div>
                        <div className="text-sm text-gray-500">{curriculum.estimatedHours}h</div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center p-3 bg-blue-50 rounded-lg">
                          <Clock className="w-5 h-5 mx-auto text-blue-600 mb-1" />
                          <div className="text-sm font-medium">{curriculum.estimatedHours}h</div>
                          <div className="text-xs text-gray-600">T·ªïng th·ªùi gian</div>
                        </div>
                        <div className="text-center p-3 bg-green-50 rounded-lg">
                          <Target className="w-5 h-5 mx-auto text-green-600 mb-1" />
                          <div className="text-sm font-medium">{curriculum.topics.length}</div>
                          <div className="text-xs text-gray-600">Ch·ªß ƒë·ªÅ</div>
                        </div>
                        <div className="text-center p-3 bg-purple-50 rounded-lg">
                          <GraduationCap className="w-5 h-5 mx-auto text-purple-600 mb-1" />
                          <div className="text-sm font-medium">{curriculum.grade}</div>
                          <div className="text-xs text-gray-600">C·∫•p ƒë·ªô</div>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="font-semibold mb-3">N·ªôi dung ch∆∞∆°ng tr√¨nh:</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                          {curriculum.topics.map((topic, index) => (
                            <div key={index} className="flex items-center p-2 bg-gray-50 rounded">
                              <div className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-medium mr-3">
                                {index + 1}
                              </div>
                              <span className="text-sm">{topic}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="flex gap-3 pt-4 border-t">
                        <Button className="flex-1 bg-blue-600 hover:bg-blue-700">
                          <MessageCircle className="w-4 h-4 mr-2" />
                          ƒêƒÉng k√Ω kh√≥a h·ªçc
                        </Button>
                        <Button variant="outline" className="flex-1">
                          <Calendar className="w-4 h-4 mr-2" />
                          Xem l·ªãch h·ªçc
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Certifications */}
          <TabsContent value="certifications">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {certifications.map((cert) => (
                <Card key={cert.id} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start gap-4">
                      <div className="text-4xl">{cert.icon}</div>
                      <div className="flex-1">
                        <h3 className="text-lg font-bold text-gray-900 mb-1">{cert.title}</h3>
                        <p className="text-purple-600 font-medium mb-2">{cert.issuer}</p>
                        <div className="text-sm text-gray-500">
                          C·∫•p ng√†y: {new Date(cert.date).toLocaleDateString('vi-VN')}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Social Media & Links */}
          <TabsContent value="social">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {Object.entries(tutor.socialLinks).map(([platform, url]) => (
                <Card key={platform} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center text-white text-xl">
                        {platform === 'facebook' && 'üìò'}
                        {platform === 'youtube' && 'üì∫'}
                        {platform === 'linkedin' && 'üíº'}
                        {platform === 'website' && 'üåê'}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-lg font-bold text-gray-900 capitalize">{platform}</h3>
                        <p className="text-gray-600">
                          {platform === 'facebook' && 'Trang Facebook c√° nh√¢n'}
                          {platform === 'youtube' && 'K√™nh YouTube gi·∫£ng d·∫°y'}
                          {platform === 'linkedin' && 'H·ªì s∆° LinkedIn'}
                          {platform === 'website' && 'Website c√° nh√¢n'}
                        </p>
                      </div>
                      <a 
                        href={url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-purple-600 hover:text-purple-700"
                      >
                        <ExternalLink className="w-5 h-5" />
                      </a>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}