import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { 
  MessageCircle, 
  Clock, 
  User, 
  BookOpen, 
  Plus,
  Eye,
  ThumbsUp,
  Share2
} from "lucide-react";
import Header from "@/components/header";

interface Question {
  id: string;
  title: string;
  content: string;
  author: {
    name: string;
    avatar: string;
    isTutor: boolean;
  };
  subject: string;
  timestamp: string;
  answersCount: number;
  viewsCount: number;
  likesCount: number;
  tags: string[];
}

export default function QAForum() {
  const [activeTab, setActiveTab] = useState("all");
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    content: "",
    subject: ""
  });

  // Mock data for questions
  const questions: Question[] = [
    {
      id: "1",
      title: "C√°ch gi·∫£i b√†i to√°n t√≠ch ph√¢n n√†y?",
      content: "T√¥i ƒëang g·∫∑p kh√≥ khƒÉn v·ªõi b√†i to√°n t√≠ch ph√¢n n√†y. C√≥ ai c√≥ th·ªÉ gi√∫p t√¥i gi·∫£i th√≠ch c√°ch l√†m kh√¥ng? ƒê√¢y l√† b√†i to√°n: ‚à´(x¬≤+2x+1)dx t·ª´ 0 ƒë·∫øn 2.",
      author: {
        name: "Nguy·ªÖn Minh Anh",
        avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b47c?w=100&h=100&fit=crop",
        isTutor: false
      },
      subject: "To√°n",
      timestamp: "2 gi·ªù tr∆∞·ªõc",
      answersCount: 5,
      viewsCount: 124,
      likesCount: 12,
      tags: ["T√≠ch ph√¢n", "L·ªõp 12", "ƒê·∫°i h·ªçc"]
    },
    {
      id: "2",
      title: "Ph∆∞∆°ng ph√°p h·ªçc IELTS Speaking hi·ªáu qu·∫£?",
      content: "M√¨nh ƒëang chu·∫©n b·ªã thi IELTS v√† mu·ªën c·∫£i thi·ªán Speaking. C√≥ ai c√≥ kinh nghi·ªám chia s·∫ª ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£ kh√¥ng? M√¨nh ƒëang ·ªü band 6.0 v√† mu·ªën ƒë·∫°t 7.0+.",
      author: {
        name: "Th·∫ßy ƒê·ª©c Anh",
        avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop",
        isTutor: true
      },
      subject: "Ti·∫øng Anh",
      timestamp: "4 gi·ªù tr∆∞·ªõc",
      answersCount: 8,
      viewsCount: 89,
      likesCount: 23,
      tags: ["IELTS", "Speaking", "Band 7.0"]
    },
    {
      id: "3",
      title: "Gi·∫£i th√≠ch v·ªÅ ph·∫£n ·ª©ng oxi h√≥a kh·ª≠",
      content: "Em kh√¥ng hi·ªÉu r√µ v·ªÅ ph·∫£n ·ª©ng oxi h√≥a kh·ª≠ trong h√≥a h·ªçc. C√≥ th·ªÉ ai ƒë√≥ gi·∫£i th√≠ch ƒë∆°n gi·∫£n v√† cho v√≠ d·ª• c·ª• th·ªÉ kh√¥ng? Em ƒëang h·ªçc l·ªõp 11.",
      author: {
        name: "L√™ Thu H∆∞∆°ng",
        avatar: "https://images.unsplash.com/photo-1580489944761-15a19d654956?w=100&h=100&fit=crop",
        isTutor: false
      },
      subject: "H√≥a",
      timestamp: "1 ng√†y tr∆∞·ªõc",
      answersCount: 3,
      viewsCount: 67,
      likesCount: 8,
      tags: ["Oxi h√≥a kh·ª≠", "L·ªõp 11", "H√≥a v√¥ c∆°"]
    },
    {
      id: "4",
      title: "C√°ch vi·∫øt essay cho b√†i thi THPT Qu·ªëc gia",
      content: "M√¨nh c·∫ßn tips vi·∫øt essay cho m√¥n VƒÉn trong k·ª≥ thi THPT. C√≥ ai c√≥ kinh nghi·ªám chia s·∫ª c·∫•u tr√∫c v√† c√°ch vi·∫øt hi·ªáu qu·∫£ kh√¥ng?",
      author: {
        name: "C√¥ Thanh Huy·ªÅn",
        avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b47c?w=100&h=100&fit=crop",
        isTutor: true
      },
      subject: "VƒÉn",
      timestamp: "2 ng√†y tr∆∞·ªõc",
      answersCount: 12,
      viewsCount: 156,
      likesCount: 34,
      tags: ["Essay", "THPT Qu·ªëc gia", "VƒÉn h·ªçc"]
    },
    {
      id: "5",
      title: "B√†i t·∫≠p v·ªÅ dao ƒë·ªông ƒëi·ªÅu h√≤a",
      content: "Ai c√≥ th·ªÉ gi√∫p m√¨nh gi·∫£i b√†i t·∫≠p n√†y v·ªÅ dao ƒë·ªông ƒëi·ªÅu h√≤a kh√¥ng? M·ªôt con l·∫Øc ƒë∆°n c√≥ chi·ªÅu d√†i l = 1m, g = 9.8 m/s¬≤. T√≠nh chu k·ª≥ dao ƒë·ªông.",
      author: {
        name: "Tr·∫ßn Ho√†ng Nam",
        avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop",
        isTutor: false
      },
      subject: "L√Ω",
      timestamp: "3 ng√†y tr∆∞·ªõc",
      answersCount: 6,
      viewsCount: 98,
      likesCount: 15,
      tags: ["Dao ƒë·ªông", "Con l·∫Øc", "L·ªõp 12"]
    }
  ];

  const subjects = [
    "To√°n", "L√Ω", "H√≥a", "Sinh", "VƒÉn", "S·ª≠", "ƒê·ªãa", "Ti·∫øng Anh", "Tin h·ªçc", "Kh√°c"
  ];

  const handleSubmitQuestion = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implement question submission
    console.log("Submitting question:", formData);
    setFormData({ title: "", content: "", subject: "" });
    setShowForm(false);
  };

  const handleViewQuestion = (questionId: string) => {
    // TODO: Navigate to question detail page
    console.log("Viewing question:", questionId);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50">
      <Header />
      
      <div className="container mx-auto px-4 py-8 pt-24 max-w-6xl">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-4">
            üí¨ Di·ªÖn ƒê√†n H·ªèi ƒê√°p
          </h1>
          <p className="text-gray-600 text-lg max-w-2xl mx-auto">
            ƒê·∫∑t c√¢u h·ªèi, chia s·∫ª ki·∫øn th·ª©c v√† k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng h·ªçc t·∫≠p AitheduConnect
          </p>
        </div>

        {/* Post Question Button */}
        <div className="flex justify-center mb-8">
          <Button 
            onClick={() => setShowForm(!showForm)}
            className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-3 rounded-full shadow-lg"
          >
            <Plus className="w-5 h-5 mr-2" />
            ƒê·∫∑t C√¢u H·ªèi
          </Button>
        </div>

        {/* Question Form */}
        {showForm && (
          <Card className="mb-8 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
            <CardHeader>
              <CardTitle className="text-xl font-bold text-gray-900">ƒê·∫∑t C√¢u H·ªèi M·ªõi</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmitQuestion} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ti√™u ƒë·ªÅ c√¢u h·ªèi *
                  </label>
                  <Input
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    placeholder="Nh·∫≠p ti√™u ƒë·ªÅ c√¢u h·ªèi c·ªßa b·∫°n..."
                    required
                    className="w-full"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√¥n h·ªçc
                  </label>
                  <Select value={formData.subject} onValueChange={(value) => setFormData({ ...formData, subject: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn m√¥n h·ªçc" />
                    </SelectTrigger>
                    <SelectContent>
                      {subjects.map((subject) => (
                        <SelectItem key={subject} value={subject}>
                          {subject}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    N·ªôi dung c√¢u h·ªèi *
                  </label>
                  <Textarea
                    value={formData.content}
                    onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                    placeholder="M√¥ t·∫£ chi ti·∫øt c√¢u h·ªèi c·ªßa b·∫°n..."
                    required
                    rows={6}
                    className="w-full"
                  />
                </div>

                <div className="flex gap-4">
                  <Button type="submit" className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700">
                    ƒêƒÉng C√¢u H·ªèi
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={() => setShowForm(false)}
                  >
                    H·ªßy
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {/* Filter Tabs */}
        <div className="flex justify-center mb-8">
          <div className="flex bg-white rounded-xl p-1 shadow-sm border border-gray-200">
            {[
              { id: "all", label: "T·∫•t c·∫£", icon: MessageCircle },
              { id: "math", label: "To√°n", icon: BookOpen },
              { id: "english", label: "Ti·∫øng Anh", icon: BookOpen },
              { id: "physics", label: "L√Ω", icon: BookOpen },
              { id: "chemistry", label: "H√≥a", icon: BookOpen }
            ].map((tab) => {
              const Icon = tab.icon;
              const isActive = activeTab === tab.id;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`
                    flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200
                    ${isActive 
                      ? "bg-gradient-to-r from-green-600 to-blue-600 text-white shadow-md" 
                      : "text-gray-600 hover:text-gray-900 hover:bg-gray-100"
                    }
                  `}
                >
                  <Icon className="w-4 h-4" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>

        {/* Questions List */}
        <div className="space-y-4">
          {questions.map((question) => (
            <Card key={question.id} className="group hover:shadow-lg transition-all duration-300 hover:scale-[1.01] border-0 bg-white/80 backdrop-blur-sm">
              <CardContent className="p-6">
                <div className="flex items-start gap-4">
                  {/* Author Avatar */}
                  <div className="flex flex-col items-center gap-2">
                    <Avatar className="w-12 h-12 border-2 border-white shadow-md">
                      <AvatarImage src={question.author.avatar} alt={question.author.name} />
                      <AvatarFallback>{question.author.name[0]}</AvatarFallback>
                    </Avatar>
                    {question.author.isTutor && (
                      <Badge className="bg-blue-600 text-white text-xs">
                        Gia s∆∞
                      </Badge>
                    )}
                  </div>

                  {/* Question Content */}
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="text-lg font-bold text-gray-900 hover:text-green-600 cursor-pointer transition-colors">
                        {question.title}
                      </h3>
                      <Badge variant="outline" className="bg-gradient-to-r from-green-100 to-blue-100 border-green-200">
                        {question.subject}
                      </Badge>
                    </div>

                    <p className="text-gray-600 mb-3 line-clamp-2">
                      {question.content}
                    </p>

                    {/* Tags */}
                    <div className="flex flex-wrap gap-2 mb-3">
                      {question.tags.map((tag, index) => (
                        <Badge key={index} variant="outline" className="text-xs bg-gray-100 border-gray-200">
                          #{tag}
                        </Badge>
                      ))}
                    </div>

                    {/* Stats */}
                    <div className="flex items-center gap-6 text-sm text-gray-500">
                      <div className="flex items-center gap-1">
                        <User className="w-4 h-4" />
                        <span>{question.author.name}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-4 h-4" />
                        <span>{question.timestamp}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <MessageCircle className="w-4 h-4" />
                        <span>{question.answersCount} tr·∫£ l·ªùi</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Eye className="w-4 h-4" />
                        <span>{question.viewsCount} l∆∞·ª£t xem</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <ThumbsUp className="w-4 h-4" />
                        <span>{question.likesCount} th√≠ch</span>
                      </div>
                    </div>
                  </div>

                  {/* Action Button */}
                  <div className="flex flex-col items-end gap-2">
                    <Button 
                      onClick={() => handleViewQuestion(question.id)}
                      className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-6"
                    >
                      <Eye className="w-4 h-4 mr-2" />
                      Xem Chi Ti·∫øt
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Load More Button */}
        <div className="text-center mt-8">
          <Button variant="outline" className="px-8 py-3">
            T·∫£i Th√™m C√¢u H·ªèi
          </Button>
        </div>
      </div>
    </div>
  );
}
